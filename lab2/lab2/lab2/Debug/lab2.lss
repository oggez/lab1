
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  0000056a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019da  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000123e  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c10  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00004108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000071e  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009b4  00000000  00000000  00004a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00005446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e6       	ldi	r30, 0x6A	; 106
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 37       	cpi	r26, 0x7A	; 122
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa e7       	ldi	r26, 0x7A	; 122
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 37       	cpi	r26, 0x7A	; 122
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	81 d0       	rcall	.+258    	; 0x222 <main>
 120:	22 c2       	rjmp	.+1092   	; 0x566 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay_1_micros>:
 *  Author: Magnus Krampell
 */ 

#include "delay.h"

void delay_1_micros() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t j=0;
 12e:	19 82       	std	Y+1, r1	; 0x01
	j++;
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	89 83       	std	Y+1, r24	; 0x01
	j++;
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	89 83       	std	Y+1, r24	; 0x01
}
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <delay_micros>:
void delay_micros(uint8_t n)   {
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	int i;
	for(i = 0; i<=n; i++){
 14c:	08 2f       	mov	r16, r24
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
	delay_1_micros();
 154:	e7 df       	rcall	.-50     	; 0x124 <delay_1_micros>
	j++;
	j++;
}
void delay_micros(uint8_t n)   {
	int i;
	for(i = 0; i<=n; i++){
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	0c 17       	cp	r16, r28
 15a:	1d 07       	cpc	r17, r29
 15c:	dc f7       	brge	.-10     	; 0x154 <delay_micros+0x10>
	delay_1_micros();
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <delay_ms>:
void delay_ms(uint8_t n)   {
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	int i;
	for(i = 0; i<=n; i++){
 170:	08 2f       	mov	r16, r24
 172:	10 e0       	ldi	r17, 0x00	; 0
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
		delay_micros(250);
 178:	8a ef       	ldi	r24, 0xFA	; 250
 17a:	e4 df       	rcall	.-56     	; 0x144 <delay_micros>
		delay_micros(250);
 17c:	8a ef       	ldi	r24, 0xFA	; 250
 17e:	e2 df       	rcall	.-60     	; 0x144 <delay_micros>
		delay_micros(250);
 180:	8a ef       	ldi	r24, 0xFA	; 250
 182:	e0 df       	rcall	.-64     	; 0x144 <delay_micros>
		delay_micros(250);
 184:	8a ef       	ldi	r24, 0xFA	; 250
 186:	de df       	rcall	.-68     	; 0x144 <delay_micros>
	delay_1_micros();
	}
}
void delay_ms(uint8_t n)   {
	int i;
	for(i = 0; i<=n; i++){
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	0c 17       	cp	r16, r28
 18c:	1d 07       	cpc	r17, r29
 18e:	a4 f7       	brge	.-24     	; 0x178 <delay_ms+0x10>
		delay_micros(250);
		delay_micros(250);
		delay_micros(250);
		delay_micros(250);
	}
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <delay_s>:
void delay_s(uint8_t n)   {
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
	int i;
	for(i = 0; i<=n; i++){
 1a2:	08 2f       	mov	r16, r24
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
		delay_ms(250);
 1aa:	8a ef       	ldi	r24, 0xFA	; 250
 1ac:	dd df       	rcall	.-70     	; 0x168 <delay_ms>
		delay_ms(250);
 1ae:	8a ef       	ldi	r24, 0xFA	; 250
 1b0:	db df       	rcall	.-74     	; 0x168 <delay_ms>
		delay_ms(250);
 1b2:	8a ef       	ldi	r24, 0xFA	; 250
 1b4:	d9 df       	rcall	.-78     	; 0x168 <delay_ms>
		delay_ms(250);
 1b6:	8a ef       	ldi	r24, 0xFA	; 250
 1b8:	d7 df       	rcall	.-82     	; 0x168 <delay_ms>
		delay_micros(250);
	}
}
void delay_s(uint8_t n)   {
	int i;
	for(i = 0; i<=n; i++){
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	0c 17       	cp	r16, r28
 1be:	1d 07       	cpc	r17, r29
 1c0:	a4 f7       	brge	.-24     	; 0x1aa <delay_s+0x10>
		delay_ms(250);
		delay_ms(250);
		delay_ms(250);
	}
	
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	08 95       	ret

000001cc <play_guess_nr>:

void play_guess_nr(uint16_t rnd_nr)
{
	uint16_t nr_of_guesses = 0;
	// show initial message, before game starts.
	output_msg("CAN YOU GUESS", "THE NUMBER?", 3);
 1cc:	43 e0       	ldi	r20, 0x03	; 3
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	72 e0       	ldi	r23, 0x02	; 2
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	0a d0       	rcall	.+20     	; 0x1ec <output_msg>
		if (input_length > 0 && guessed_nr >= 1 && guessed_nr <= 100) {
			// ...return that number!
			return guessed_nr;
		} else {
			// show error/info message!
			output_msg("ENTER A NUMBER", "BETWEEN 1-100!", 1);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	6e e1       	ldi	r22, 0x1E	; 30
 1dc:	72 e0       	ldi	r23, 0x02	; 2
 1de:	8d e2       	ldi	r24, 0x2D	; 45
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	04 d0       	rcall	.+8      	; 0x1ec <output_msg>
 1e4:	f9 cf       	rjmp	.-14     	; 0x1d8 <play_guess_nr+0xc>

000001e6 <hmi_init>:
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 1e6:	d7 d0       	rcall	.+430    	; 0x396 <numkey_init>
 1e8:	70 c0       	rjmp	.+224    	; 0x2ca <lcd_init>
 1ea:	08 95       	ret

000001ec <output_msg>:
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */

void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	7c 01       	movw	r14, r24
 1f8:	8b 01       	movw	r16, r22
 1fa:	c4 2f       	mov	r28, r20
	//lcd_set_cursor_mode(CURSOR_OFF);												finns?
	lcd_clear();
 1fc:	99 d0       	rcall	.+306    	; 0x330 <lcd_clear>
	lcd_set_cursor_pos(0, 0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	87 d0       	rcall	.+270    	; 0x312 <lcd_set_cursor_pos>
	lcd_write_str(p_str1);
 204:	c7 01       	movw	r24, r14
 206:	b7 d0       	rcall	.+366    	; 0x376 <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	82 d0       	rcall	.+260    	; 0x312 <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 20e:	c8 01       	movw	r24, r16
 210:	b2 d0       	rcall	.+356    	; 0x376 <lcd_write_str>
	delay_s(delay_after_msg);
 212:	8c 2f       	mov	r24, r28
 214:	c2 df       	rcall	.-124    	; 0x19a <delay_s>
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <main>:
int main(void)

{
	uint16_t rnd_nr;
	// initialize HMI (LCD and numeric keyboard)
	hmi_init();
 222:	e1 df       	rcall	.-62     	; 0x1e6 <hmi_init>
	// generate seed for the pseudo-random number generator
		srand(1);															//random_seed();
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	36 d1       	rcall	.+620    	; 0x496 <srand>
	// show start screen for the game
	output_msg("WELCOME!", "LET'S PLAY...", 3);
 22a:	43 e0       	ldi	r20, 0x03	; 3
 22c:	6c e3       	ldi	r22, 0x3C	; 60
 22e:	72 e0       	ldi	r23, 0x02	; 2
 230:	8a e4       	ldi	r24, 0x4A	; 74
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	db df       	rcall	.-74     	; 0x1ec <output_msg>
	// play game
	while (1) {
		// generate a random number
		rnd_nr = rand()  % 101;														//random_get_nr(100) + 1;
 236:	c5 e6       	ldi	r28, 0x65	; 101
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	2a d1       	rcall	.+596    	; 0x490 <rand>
 23c:	be 01       	movw	r22, r28
 23e:	ba d0       	rcall	.+372    	; 0x3b4 <__divmodhi4>
		// play a round...
		play_guess_nr(rnd_nr);
 240:	c5 df       	rcall	.-118    	; 0x1cc <play_guess_nr>
	}
 242:	fb cf       	rjmp	.-10     	; 0x23a <main+0x18>

00000244 <write_byte>:

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 24e:	2e 98       	cbi	0x05, 6	; 5
 250:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 252:	c2 e0       	ldi	r28, 0x02	; 2
 254:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 256:	00 23       	and	r16, r16
 258:	24 f4       	brge	.+8      	; 0x262 <write_byte+0x1e>
			SET_BIT(PORTH, 6);	// write 1
 25a:	88 81       	ld	r24, Y
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	88 83       	st	Y, r24
 260:	03 c0       	rjmp	.+6      	; 0x268 <write_byte+0x24>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 262:	88 81       	ld	r24, Y
 264:	8f 7b       	andi	r24, 0xBF	; 191
 266:	88 83       	st	Y, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 268:	98 81       	ld	r25, Y
 26a:	90 62       	ori	r25, 0x20	; 32
 26c:	98 83       	st	Y, r25
		delay_1_micros();
 26e:	5a df       	rcall	.-332    	; 0x124 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 270:	98 81       	ld	r25, Y
 272:	9f 7d       	andi	r25, 0xDF	; 223
 274:	98 83       	st	Y, r25
		// shift to next bit
		data = data << 1;
 276:	00 0f       	add	r16, r16
 278:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 27a:	69 f7       	brne	.-38     	; 0x256 <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 27c:	2e 9a       	sbi	0x05, 6	; 5
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
 28e:	81 11       	cpse	r24, r1
 290:	04 c0       	rjmp	.+8      	; 0x29a <lcd_write+0x12>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 292:	2c 98       	cbi	0x05, 4	; 5
		// Write command
		write_byte(data);
 294:	86 2f       	mov	r24, r22
 296:	d6 df       	rcall	.-84     	; 0x244 <write_byte>
 298:	14 c0       	rjmp	.+40     	; 0x2c2 <lcd_write+0x3a>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 29a:	2c 9a       	sbi	0x05, 4	; 5
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
 29c:	60 52       	subi	r22, 0x20	; 32
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	eb 01       	movw	r28, r22
 2a2:	cc 0f       	add	r28, r28
 2a4:	dd 1f       	adc	r29, r29
 2a6:	cc 0f       	add	r28, r28
 2a8:	dd 1f       	adc	r29, r29
 2aa:	c6 0f       	add	r28, r22
 2ac:	d7 1f       	adc	r29, r23
 2ae:	cd 5a       	subi	r28, 0xAD	; 173
 2b0:	dd 4f       	sbci	r29, 0xFD	; 253
		for (i = 0; i < CHR_WIDTH; i++) {
 2b2:	10 e0       	ldi	r17, 0x00	; 0
			write_byte(lcd_char_table[character][i]);
 2b4:	89 91       	ld	r24, Y+
 2b6:	c6 df       	rcall	.-116    	; 0x244 <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 2b8:	1f 5f       	subi	r17, 0xFF	; 255
 2ba:	15 30       	cpi	r17, 0x05	; 5
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <lcd_write+0x2c>
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	c1 df       	rcall	.-126    	; 0x244 <write_byte>
	}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	08 95       	ret

000002ca <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 2ca:	e1 e0       	ldi	r30, 0x01	; 1
 2cc:	f1 e0       	ldi	r31, 0x01	; 1
 2ce:	80 81       	ld	r24, Z
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 2d4:	80 81       	ld	r24, Z
 2d6:	80 64       	ori	r24, 0x40	; 64
 2d8:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 2da:	24 9a       	sbi	0x04, 4	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 2dc:	25 9a       	sbi	0x04, 5	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 2de:	26 9a       	sbi	0x04, 6	; 4
	
	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 2e0:	84 e1       	ldi	r24, 0x14	; 20
 2e2:	42 df       	rcall	.-380    	; 0x168 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 2e4:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(10);			// Wait a little...
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	3f df       	rcall	.-386    	; 0x168 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 2ea:	2e 9a       	sbi	0x05, 6	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 2ec:	61 e2       	ldi	r22, 0x21	; 33
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	cb df       	rcall	.-106    	; 0x288 <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 2f2:	63 e1       	ldi	r22, 0x13	; 19
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	c8 df       	rcall	.-112    	; 0x288 <lcd_write>
	lcd_write(CMD, 0xCA);	// Set Vop (contrast)
 2f8:	6a ec       	ldi	r22, 0xCA	; 202
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	c5 df       	rcall	.-118    	; 0x288 <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 2fe:	64 e0       	ldi	r22, 0x04	; 4
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	c2 df       	rcall	.-124    	; 0x288 <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 304:	60 e2       	ldi	r22, 0x20	; 32
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	bf df       	rcall	.-130    	; 0x288 <lcd_write>
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 30a:	6c e0       	ldi	r22, 0x0C	; 12
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	bc cf       	rjmp	.-136    	; 0x288 <lcd_write>
 310:	08 95       	ret

00000312 <lcd_set_cursor_pos>:
 * parameter:
 *	row: 0-5  (row 1-6)
 *	col: 0-13 (col 1-14)
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
 312:	cf 93       	push	r28
 314:	c6 2f       	mov	r28, r22
	row = 0x40 | row;						// set row
 316:	68 2f       	mov	r22, r24
 318:	60 64       	ori	r22, 0x40	; 64
	lcd_write(CMD, row);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	b5 df       	rcall	.-150    	; 0x288 <lcd_write>
	col = 0x80 | (col * CHR_TOTAL_WIDTH);	// set column
 31e:	6c 2f       	mov	r22, r28
 320:	66 0f       	add	r22, r22
 322:	6c 0f       	add	r22, r28
 324:	66 0f       	add	r22, r22
 326:	60 68       	ori	r22, 0x80	; 128
	lcd_write(CMD, col);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	ae df       	rcall	.-164    	; 0x288 <lcd_write>
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	0f e0       	ldi	r16, 0x0F	; 15
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	0f 2e       	mov	r0, r31
 342:	f7 e0       	ldi	r31, 0x07	; 7
 344:	ef 2e       	mov	r14, r31
 346:	f0 2d       	mov	r31, r0
 348:	f1 2c       	mov	r15, r1
 34a:	08 c0       	rjmp	.+16     	; 0x35c <lcd_clear+0x2c>
	for(int i = 0; i<=14;i++){
		for(int j = 0; j <= 6; j++){
		lcd_write(CHR,' ');
 34c:	60 e2       	ldi	r22, 0x20	; 32
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	9b df       	rcall	.-202    	; 0x288 <lcd_write>
 352:	21 97       	sbiw	r28, 0x01	; 1
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for(int i = 0; i<=14;i++){
		for(int j = 0; j <= 6; j++){
 354:	d9 f7       	brne	.-10     	; 0x34c <lcd_clear+0x1c>
 356:	01 50       	subi	r16, 0x01	; 1
 358:	11 09       	sbc	r17, r1
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	for(int i = 0; i<=14;i++){
 35a:	19 f0       	breq	.+6      	; 0x362 <lcd_clear+0x32>

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 35c:	ce 2d       	mov	r28, r14
 35e:	df 2d       	mov	r29, r15
 360:	f5 cf       	rjmp	.-22     	; 0x34c <lcd_clear+0x1c>
		for(int j = 0; j <= 6; j++){
		lcd_write(CHR,' ');

		}
	}
		lcd_set_cursor_pos(0,0);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	d5 df       	rcall	.-86     	; 0x312 <lcd_set_cursor_pos>
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <lcd_write_str>:
 * Write a string of character to the LCD.
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29

  while(*p_str != '\0'){
 37a:	fc 01       	movw	r30, r24
 37c:	60 81       	ld	r22, Z
 37e:	66 23       	and	r22, r22
 380:	39 f0       	breq	.+14     	; 0x390 <lcd_write_str+0x1a>
 382:	ec 01       	movw	r28, r24
 384:	21 96       	adiw	r28, 0x01	; 1
	lcd_write(CHR, *p_str);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	7f df       	rcall	.-258    	; 0x288 <lcd_write>
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str){

  while(*p_str != '\0'){
 38a:	69 91       	ld	r22, Y+
 38c:	61 11       	cpse	r22, r1
 38e:	fb cf       	rjmp	.-10     	; 0x386 <lcd_write_str+0x10>
	lcd_write(CHR, *p_str);
	p_str++;
  }
  
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// Configure I/O
	SET_BIT(DDRG, 5);		// Column 0 (output)
 396:	9d 9a       	sbi	0x13, 5	; 19
	SET_BIT(DDRE, 3);		// Column 1 (output)
 398:	6b 9a       	sbi	0x0d, 3	; 13
	SET_BIT(DDRH, 3);		// Column 2 (output)
 39a:	e1 e0       	ldi	r30, 0x01	; 1
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	80 81       	ld	r24, Z
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	80 83       	st	Z, r24
	SET_BIT(DDRH, 4);		// Column 3 (output)
 3a4:	80 81       	ld	r24, Z
 3a6:	80 61       	ori	r24, 0x10	; 16
 3a8:	80 83       	st	Z, r24
	CLR_BIT(DDRF, 5);		// Row 0 (input)
 3aa:	85 98       	cbi	0x10, 5	; 16
	CLR_BIT(DDRF, 4);		// Row 1 (input)
 3ac:	84 98       	cbi	0x10, 4	; 16
	CLR_BIT(DDRE, 4);		// Row 2 (input)
 3ae:	6c 98       	cbi	0x0d, 4	; 13
	CLR_BIT(DDRE, 5);		// Row 3 (input)
 3b0:	6d 98       	cbi	0x0d, 5	; 13
 3b2:	08 95       	ret

000003b4 <__divmodhi4>:
 3b4:	97 fb       	bst	r25, 7
 3b6:	07 2e       	mov	r0, r23
 3b8:	16 f4       	brtc	.+4      	; 0x3be <__divmodhi4+0xa>
 3ba:	00 94       	com	r0
 3bc:	06 d0       	rcall	.+12     	; 0x3ca <__divmodhi4_neg1>
 3be:	77 fd       	sbrc	r23, 7
 3c0:	08 d0       	rcall	.+16     	; 0x3d2 <__divmodhi4_neg2>
 3c2:	0b d0       	rcall	.+22     	; 0x3da <__udivmodhi4>
 3c4:	07 fc       	sbrc	r0, 7
 3c6:	05 d0       	rcall	.+10     	; 0x3d2 <__divmodhi4_neg2>
 3c8:	3e f4       	brtc	.+14     	; 0x3d8 <__divmodhi4_exit>

000003ca <__divmodhi4_neg1>:
 3ca:	90 95       	com	r25
 3cc:	81 95       	neg	r24
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	08 95       	ret

000003d2 <__divmodhi4_neg2>:
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255

000003d8 <__divmodhi4_exit>:
 3d8:	08 95       	ret

000003da <__udivmodhi4>:
 3da:	aa 1b       	sub	r26, r26
 3dc:	bb 1b       	sub	r27, r27
 3de:	51 e1       	ldi	r21, 0x11	; 17
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <__udivmodhi4_ep>

000003e2 <__udivmodhi4_loop>:
 3e2:	aa 1f       	adc	r26, r26
 3e4:	bb 1f       	adc	r27, r27
 3e6:	a6 17       	cp	r26, r22
 3e8:	b7 07       	cpc	r27, r23
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__udivmodhi4_ep>
 3ec:	a6 1b       	sub	r26, r22
 3ee:	b7 0b       	sbc	r27, r23

000003f0 <__udivmodhi4_ep>:
 3f0:	88 1f       	adc	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	5a 95       	dec	r21
 3f6:	a9 f7       	brne	.-22     	; 0x3e2 <__udivmodhi4_loop>
 3f8:	80 95       	com	r24
 3fa:	90 95       	com	r25
 3fc:	bc 01       	movw	r22, r24
 3fe:	cd 01       	movw	r24, r26
 400:	08 95       	ret

00000402 <do_rand>:
 402:	8f 92       	push	r8
 404:	9f 92       	push	r9
 406:	af 92       	push	r10
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
 418:	68 81       	ld	r22, Y
 41a:	79 81       	ldd	r23, Y+1	; 0x01
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	9b 81       	ldd	r25, Y+3	; 0x03
 420:	61 15       	cp	r22, r1
 422:	71 05       	cpc	r23, r1
 424:	81 05       	cpc	r24, r1
 426:	91 05       	cpc	r25, r1
 428:	21 f4       	brne	.+8      	; 0x432 <do_rand+0x30>
 42a:	64 e2       	ldi	r22, 0x24	; 36
 42c:	79 ed       	ldi	r23, 0xD9	; 217
 42e:	8b e5       	ldi	r24, 0x5B	; 91
 430:	97 e0       	ldi	r25, 0x07	; 7
 432:	2d e1       	ldi	r18, 0x1D	; 29
 434:	33 ef       	ldi	r19, 0xF3	; 243
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	38 d0       	rcall	.+112    	; 0x4ac <__divmodsi4>
 43c:	49 01       	movw	r8, r18
 43e:	5a 01       	movw	r10, r20
 440:	9b 01       	movw	r18, r22
 442:	ac 01       	movw	r20, r24
 444:	a7 ea       	ldi	r26, 0xA7	; 167
 446:	b1 e4       	ldi	r27, 0x41	; 65
 448:	4d d0       	rcall	.+154    	; 0x4e4 <__muluhisi3>
 44a:	6b 01       	movw	r12, r22
 44c:	7c 01       	movw	r14, r24
 44e:	ac ee       	ldi	r26, 0xEC	; 236
 450:	b4 ef       	ldi	r27, 0xF4	; 244
 452:	a5 01       	movw	r20, r10
 454:	94 01       	movw	r18, r8
 456:	52 d0       	rcall	.+164    	; 0x4fc <__mulohisi3>
 458:	dc 01       	movw	r26, r24
 45a:	cb 01       	movw	r24, r22
 45c:	8c 0d       	add	r24, r12
 45e:	9d 1d       	adc	r25, r13
 460:	ae 1d       	adc	r26, r14
 462:	bf 1d       	adc	r27, r15
 464:	b7 ff       	sbrs	r27, 7
 466:	03 c0       	rjmp	.+6      	; 0x46e <do_rand+0x6c>
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	a1 09       	sbc	r26, r1
 46c:	b0 48       	sbci	r27, 0x80	; 128
 46e:	88 83       	st	Y, r24
 470:	99 83       	std	Y+1, r25	; 0x01
 472:	aa 83       	std	Y+2, r26	; 0x02
 474:	bb 83       	std	Y+3, r27	; 0x03
 476:	9f 77       	andi	r25, 0x7F	; 127
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	bf 90       	pop	r11
 486:	af 90       	pop	r10
 488:	9f 90       	pop	r9
 48a:	8f 90       	pop	r8
 48c:	08 95       	ret

0000048e <rand_r>:
 48e:	b9 cf       	rjmp	.-142    	; 0x402 <do_rand>

00000490 <rand>:
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	b6 cf       	rjmp	.-148    	; 0x402 <do_rand>

00000496 <srand>:
 496:	a0 e0       	ldi	r26, 0x00	; 0
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 49e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 4a2:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 4a6:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 4aa:	08 95       	ret

000004ac <__divmodsi4>:
 4ac:	05 2e       	mov	r0, r21
 4ae:	97 fb       	bst	r25, 7
 4b0:	16 f4       	brtc	.+4      	; 0x4b6 <__divmodsi4+0xa>
 4b2:	00 94       	com	r0
 4b4:	0f d0       	rcall	.+30     	; 0x4d4 <__negsi2>
 4b6:	57 fd       	sbrc	r21, 7
 4b8:	05 d0       	rcall	.+10     	; 0x4c4 <__divmodsi4_neg2>
 4ba:	24 d0       	rcall	.+72     	; 0x504 <__udivmodsi4>
 4bc:	07 fc       	sbrc	r0, 7
 4be:	02 d0       	rcall	.+4      	; 0x4c4 <__divmodsi4_neg2>
 4c0:	46 f4       	brtc	.+16     	; 0x4d2 <__divmodsi4_exit>
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__negsi2>

000004c4 <__divmodsi4_neg2>:
 4c4:	50 95       	com	r21
 4c6:	40 95       	com	r20
 4c8:	30 95       	com	r19
 4ca:	21 95       	neg	r18
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	4f 4f       	sbci	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255

000004d2 <__divmodsi4_exit>:
 4d2:	08 95       	ret

000004d4 <__negsi2>:
 4d4:	90 95       	com	r25
 4d6:	80 95       	com	r24
 4d8:	70 95       	com	r23
 4da:	61 95       	neg	r22
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__muluhisi3>:
 4e4:	31 d0       	rcall	.+98     	; 0x548 <__umulhisi3>
 4e6:	a5 9f       	mul	r26, r21
 4e8:	90 0d       	add	r25, r0
 4ea:	b4 9f       	mul	r27, r20
 4ec:	90 0d       	add	r25, r0
 4ee:	a4 9f       	mul	r26, r20
 4f0:	80 0d       	add	r24, r0
 4f2:	91 1d       	adc	r25, r1
 4f4:	11 24       	eor	r1, r1
 4f6:	08 95       	ret

000004f8 <__mulshisi3>:
 4f8:	b7 ff       	sbrs	r27, 7
 4fa:	f4 cf       	rjmp	.-24     	; 0x4e4 <__muluhisi3>

000004fc <__mulohisi3>:
 4fc:	f3 df       	rcall	.-26     	; 0x4e4 <__muluhisi3>
 4fe:	82 1b       	sub	r24, r18
 500:	93 0b       	sbc	r25, r19
 502:	08 95       	ret

00000504 <__udivmodsi4>:
 504:	a1 e2       	ldi	r26, 0x21	; 33
 506:	1a 2e       	mov	r1, r26
 508:	aa 1b       	sub	r26, r26
 50a:	bb 1b       	sub	r27, r27
 50c:	fd 01       	movw	r30, r26
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__udivmodsi4_ep>

00000510 <__udivmodsi4_loop>:
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	ee 1f       	adc	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	a2 17       	cp	r26, r18
 51a:	b3 07       	cpc	r27, r19
 51c:	e4 07       	cpc	r30, r20
 51e:	f5 07       	cpc	r31, r21
 520:	20 f0       	brcs	.+8      	; 0x52a <__udivmodsi4_ep>
 522:	a2 1b       	sub	r26, r18
 524:	b3 0b       	sbc	r27, r19
 526:	e4 0b       	sbc	r30, r20
 528:	f5 0b       	sbc	r31, r21

0000052a <__udivmodsi4_ep>:
 52a:	66 1f       	adc	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	1a 94       	dec	r1
 534:	69 f7       	brne	.-38     	; 0x510 <__udivmodsi4_loop>
 536:	60 95       	com	r22
 538:	70 95       	com	r23
 53a:	80 95       	com	r24
 53c:	90 95       	com	r25
 53e:	9b 01       	movw	r18, r22
 540:	ac 01       	movw	r20, r24
 542:	bd 01       	movw	r22, r26
 544:	cf 01       	movw	r24, r30
 546:	08 95       	ret

00000548 <__umulhisi3>:
 548:	a2 9f       	mul	r26, r18
 54a:	b0 01       	movw	r22, r0
 54c:	b3 9f       	mul	r27, r19
 54e:	c0 01       	movw	r24, r0
 550:	a3 9f       	mul	r26, r19
 552:	70 0d       	add	r23, r0
 554:	81 1d       	adc	r24, r1
 556:	11 24       	eor	r1, r1
 558:	91 1d       	adc	r25, r1
 55a:	b2 9f       	mul	r27, r18
 55c:	70 0d       	add	r23, r0
 55e:	81 1d       	adc	r24, r1
 560:	11 24       	eor	r1, r1
 562:	91 1d       	adc	r25, r1
 564:	08 95       	ret

00000566 <_exit>:
 566:	f8 94       	cli

00000568 <__stop_program>:
 568:	ff cf       	rjmp	.-2      	; 0x568 <__stop_program>
