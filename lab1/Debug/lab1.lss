
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001226  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e91  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b7  00000000  00000000  000025eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064c  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c6  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	2b d0       	rcall	.+86     	; 0x166 <main>
 110:	a5 c0       	rjmp	.+330    	; 0x25c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <delay_1_micros>:
void delay_micros(uint8_t n)   {
	int i;
	for(i = 0; i<=n; i++){
	delay_1_micros();
	}
}
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <delay_ms>:
void delay_ms(uint8_t n)   {
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	int i;
	int temp = n*1000;
 13c:	28 ee       	ldi	r18, 0xE8	; 232
 13e:	33 e0       	ldi	r19, 0x03	; 3
 140:	82 9f       	mul	r24, r18
 142:	80 01       	movw	r16, r0
 144:	83 9f       	mul	r24, r19
 146:	10 0d       	add	r17, r0
 148:	11 24       	eor	r1, r1
	for(i = 0; i<=temp; i++){
 14a:	11 23       	and	r17, r17
 14c:	3c f0       	brlt	.+14     	; 0x15c <delay_ms+0x28>
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
		delay_1_micros();
 152:	e0 df       	rcall	.-64     	; 0x114 <delay_1_micros>
	}
}
void delay_ms(uint8_t n)   {
	int i;
	int temp = n*1000;
	for(i = 0; i<=temp; i++){
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	0c 17       	cp	r16, r28
 158:	1d 07       	cpc	r17, r29
 15a:	dc f7       	brge	.-10     	; 0x152 <delay_ms+0x1e>
		delay_1_micros();
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <main>:
 166:	6b d0       	rcall	.+214    	; 0x23e <numkey_init>
 168:	46 d0       	rcall	.+140    	; 0x1f6 <lcd_init>
 16a:	23 d0       	rcall	.+70     	; 0x1b2 <lcd_clear>
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x6>

0000016e <write_byte>:

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 178:	2e 98       	cbi	0x05, 6	; 5
 17a:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 17c:	c2 e0       	ldi	r28, 0x02	; 2
 17e:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 180:	00 23       	and	r16, r16
 182:	24 f4       	brge	.+8      	; 0x18c <write_byte+0x1e>
			SET_BIT(PORTH, 6);	// write 1
 184:	88 81       	ld	r24, Y
 186:	80 64       	ori	r24, 0x40	; 64
 188:	88 83       	st	Y, r24
 18a:	03 c0       	rjmp	.+6      	; 0x192 <write_byte+0x24>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 18c:	88 81       	ld	r24, Y
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	88 83       	st	Y, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 192:	98 81       	ld	r25, Y
 194:	90 62       	ori	r25, 0x20	; 32
 196:	98 83       	st	Y, r25
		delay_1_micros();
 198:	bd df       	rcall	.-134    	; 0x114 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 19a:	98 81       	ld	r25, Y
 19c:	9f 7d       	andi	r25, 0xDF	; 223
 19e:	98 83       	st	Y, r25
		// shift to next bit
		data = data << 1;
 1a0:	00 0f       	add	r16, r16
 1a2:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 1a4:	69 f7       	brne	.-38     	; 0x180 <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 1a6:	2e 9a       	sbi	0x05, 6	; 5
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 1b2:	08 95       	ret

000001b4 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
 1ba:	81 11       	cpse	r24, r1
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <lcd_write+0x12>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 1be:	2c 98       	cbi	0x05, 4	; 5
		// Write command
		write_byte(data);
 1c0:	86 2f       	mov	r24, r22
 1c2:	d5 df       	rcall	.-86     	; 0x16e <write_byte>
 1c4:	14 c0       	rjmp	.+40     	; 0x1ee <lcd_write+0x3a>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 1c6:	2c 9a       	sbi	0x05, 4	; 5
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
 1c8:	60 52       	subi	r22, 0x20	; 32
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	eb 01       	movw	r28, r22
 1ce:	cc 0f       	add	r28, r28
 1d0:	dd 1f       	adc	r29, r29
 1d2:	cc 0f       	add	r28, r28
 1d4:	dd 1f       	adc	r29, r29
 1d6:	c6 0f       	add	r28, r22
 1d8:	d7 1f       	adc	r29, r23
 1da:	c0 50       	subi	r28, 0x00	; 0
 1dc:	de 4f       	sbci	r29, 0xFE	; 254
		for (i = 0; i < CHR_WIDTH; i++) {
 1de:	10 e0       	ldi	r17, 0x00	; 0
			write_byte(lcd_char_table[character][i]);
 1e0:	89 91       	ld	r24, Y+
 1e2:	c5 df       	rcall	.-118    	; 0x16e <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	15 30       	cpi	r17, 0x05	; 5
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <lcd_write+0x2c>
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	c0 df       	rcall	.-128    	; 0x16e <write_byte>
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 1f6:	e1 e0       	ldi	r30, 0x01	; 1
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	80 81       	ld	r24, Z
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 206:	24 9a       	sbi	0x04, 4	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 208:	25 9a       	sbi	0x04, 5	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 20a:	26 9a       	sbi	0x04, 6	; 4
	
	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 20c:	84 e1       	ldi	r24, 0x14	; 20
 20e:	92 df       	rcall	.-220    	; 0x134 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 210:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(10);			// Wait a little...
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	8f df       	rcall	.-226    	; 0x134 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 216:	2e 9a       	sbi	0x05, 6	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 218:	61 e2       	ldi	r22, 0x21	; 33
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	cb df       	rcall	.-106    	; 0x1b4 <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 21e:	63 e1       	ldi	r22, 0x13	; 19
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	c8 df       	rcall	.-112    	; 0x1b4 <lcd_write>
	lcd_write(CMD, 0xC5);	// Set Vop (contrast)
 224:	65 ec       	ldi	r22, 0xC5	; 197
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	c5 df       	rcall	.-118    	; 0x1b4 <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 22a:	64 e0       	ldi	r22, 0x04	; 4
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	c2 df       	rcall	.-124    	; 0x1b4 <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 230:	60 e2       	ldi	r22, 0x20	; 32
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	bf df       	rcall	.-130    	; 0x1b4 <lcd_write>
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 236:	6c e0       	ldi	r22, 0x0C	; 12
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	bc cf       	rjmp	.-136    	; 0x1b4 <lcd_write>
 23c:	08 95       	ret

0000023e <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// Configure I/O
	SET_BIT(DDRG, 5);		// Column 0 (output)
 23e:	9d 9a       	sbi	0x13, 5	; 19
	SET_BIT(DDRE, 3);		// Column 1 (output)
 240:	6b 9a       	sbi	0x0d, 3	; 13
	SET_BIT(DDRH, 3);		// Column 2 (output)
 242:	e1 e0       	ldi	r30, 0x01	; 1
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24
	SET_BIT(DDRH, 4);		// Column 3 (output)
 24c:	80 81       	ld	r24, Z
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 83       	st	Z, r24
	CLR_BIT(DDRF, 5);		// Row 0 (input)
 252:	85 98       	cbi	0x10, 5	; 16
	CLR_BIT(DDRF, 4);		// Row 1 (input)
 254:	84 98       	cbi	0x10, 4	; 16
	CLR_BIT(DDRE, 4);		// Row 2 (input)
 256:	6c 98       	cbi	0x0d, 4	; 13
	CLR_BIT(DDRE, 5);		// Row 3 (input)
 258:	6d 98       	cbi	0x0d, 5	; 13
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
